(function() {
    var COMPILED = false;
    var goog = goog || {};
    goog.global = this;
    goog.global.CLOSURE_UNCOMPILED_DEFINES;
    goog.global.CLOSURE_DEFINES;
    goog.isDef = function(val) {
        return val !== void 0
    };
    goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
        var parts = name.split('.');
        var cur = opt_objectToExportTo || goog.global;
        if (!(parts[0] in cur) && cur.execScript)
            cur.execScript('var ' + parts[0]);
        for (var part; parts.length && (part = parts.shift());)
            if (!parts.length && goog.isDef(opt_object))
                cur[part] = opt_object;
            else if (cur[part] && cur[part] !== Object.prototype[part])
                cur = cur[part];
            else
                cur = cur[part] = {}
    };
    goog.define = function(name, defaultValue) {
        var value = defaultValue;
        if (!COMPILED)
            if (goog.global.CLOSURE_UNCOMPILED_DEFINES
                    && Object.prototype.hasOwnProperty.call(
                            goog.global.CLOSURE_UNCOMPILED_DEFINES, name))
                value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
            else if (goog.global.CLOSURE_DEFINES
                    && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES,
                            name))
                value = goog.global.CLOSURE_DEFINES[name];
        goog.exportPath_(name, value)
    };
    goog.define('goog.DEBUG', true);
    goog.define('goog.LOCALE', 'en');
    goog.define('goog.TRUSTED_SITE', true);
    goog.define('goog.STRICT_MODE_COMPATIBLE', false);
    goog.define('goog.DISALLOW_TEST_ONLY_CODE', COMPILED && !goog.DEBUG);
    goog.define('goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING', false);
    goog.provide = function(name) {
        if (goog.isInModuleLoader_())
            throw Error('goog.provide can not be used within a goog.module.');
        if (!COMPILED)
            if (goog.isProvided_(name))
                throw Error('Namespace "' + name + '" already declared.');
        goog.constructNamespace_(name)
    };
    goog.constructNamespace_ = function(name, opt_obj) {
        if (!COMPILED) {
            delete goog.implicitNamespaces_[name];
            var namespace = name;
            while (namespace = namespace.substring(0, namespace.lastIndexOf('.'))) {
                if (goog.getObjectByName(namespace))
                    break;
                goog.implicitNamespaces_[namespace] = true
            }
        }
        goog.exportPath_(name, opt_obj)
    };
    goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
    goog.module = function(name) {
        if (!goog.isString(name) || !name
                || name.search(goog.VALID_MODULE_RE_) == -1)
            throw Error('Invalid module identifier');
        if (!goog.isInModuleLoader_())
            throw Error('Module '
                    + name
                    + ' has been loaded incorrectly. Note, '
                    + 'modules cannot be loaded as normal scripts. They require some kind of '
                    + "pre-processing step. You're likely trying to load a module via a "
                    + 'script tag or as a part of a concatenated bundle without rewriting the '
                    + 'module. For more info see: '
                    + 'https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.');
        if (goog.moduleLoaderState_.moduleName)
            throw Error('goog.module may only be called once per module.');
        goog.moduleLoaderState_.moduleName = name;
        if (!COMPILED) {
            if (goog.isProvided_(name))
                throw Error('Namespace "' + name + '" already declared.');
            delete goog.implicitNamespaces_[name]
        }
    };
    goog.module.get = function(name) {
        return goog.module.getInternal_(name)
    };
    goog.module.getInternal_ = function(name) {
        if (!COMPILED)
            if (name in goog.loadedModules_)
                return goog.loadedModules_[name];
            else if (!goog.implicitNamespaces_[name]) {
                var ns = goog.getObjectByName(name);
                return ns != null ? ns : null
            }
        return null
    };
    goog.moduleLoaderState_ = null;
    goog.isInModuleLoader_ = function() {
        return goog.moduleLoaderState_ != null
    };
    goog.module.declareLegacyNamespace = function() {
        if (!COMPILED && !goog.isInModuleLoader_())
            throw new Error('goog.module.declareLegacyNamespace must be called from '
                    + 'within a goog.module');
        if (!COMPILED && !goog.moduleLoaderState_.moduleName)
            throw Error('goog.module must be called prior to '
                    + 'goog.module.declareLegacyNamespace.');
        goog.moduleLoaderState_.declareLegacyNamespace = true
    };
    goog.setTestOnly = function(opt_message) {
        if (goog.DISALLOW_TEST_ONLY_CODE) {
            opt_message = opt_message || '';
            throw Error('Importing test-only code into non-debug environment'
                    + (opt_message ? ': ' + opt_message : '.'));
        }
    };
    goog.forwardDeclare = function(name) {
    };
    goog.forwardDeclare('Document');
    goog.forwardDeclare('HTMLScriptElement');
    goog.forwardDeclare('XMLHttpRequest');
    if (!COMPILED) {
        goog.isProvided_ = function(name) {
            return name in goog.loadedModules_ || !goog.implicitNamespaces_[name]
                    && goog.isDefAndNotNull(goog.getObjectByName(name))
        };
        goog.implicitNamespaces_ = {
            'goog.module' : true
        }
    }
    goog.getObjectByName = function(name, opt_obj) {
        var parts = name.split('.');
        var cur = opt_obj || goog.global;
        for (var part; part = parts.shift();)
            if (goog.isDefAndNotNull(cur[part]))
                cur = cur[part];
            else
                return null;
        return cur
    };
    goog.globalize = function(obj, opt_global) {
        var global = opt_global || goog.global;
        for ( var x in obj)
            global[x] = obj[x]
    };
    goog.addDependency = function(relPath, provides, requires, opt_loadFlags) {
        if (goog.DEPENDENCIES_ENABLED) {
            var provide, require;
            var path = relPath.replace(/\\/g, '/');
            var deps = goog.dependencies_;
            if (!opt_loadFlags || typeof opt_loadFlags === 'boolean')
                opt_loadFlags = opt_loadFlags ? {
                    'module' : 'goog'
                } : {};
            for (var i = 0; provide = provides[i]; i++) {
                deps.nameToPath[provide] = path;
                deps.loadFlags[path] = opt_loadFlags
            }
            for (var j = 0; require = requires[j]; j++) {
                if (!(path in deps.requires))
                    deps.requires[path] = {};
                deps.requires[path][require] = true
            }
        }
    };
    goog.define('goog.ENABLE_DEBUG_LOADER', true);
    goog.logToConsole_ = function(msg) {
        if (goog.global.console)
            goog.global.console['error'](msg)
    };
    goog.require = function(name) {
        if (!COMPILED) {
            if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_)
                goog.maybeProcessDeferredDep_(name);
            if (goog.isProvided_(name)) {
                if (goog.isInModuleLoader_())
                    return goog.module.getInternal_(name)
            } else if (goog.ENABLE_DEBUG_LOADER) {
                var path = goog.getPathFromDeps_(name);
                if (path)
                    goog.writeScripts_(path);
                else {
                    var errorMessage = 'goog.require could not find: ' + name;
                    goog.logToConsole_(errorMessage);
                    throw Error(errorMessage);
                }
            }
            return null
        }
    };
    goog.basePath = '';
    goog.global.CLOSURE_BASE_PATH;
    goog.global.CLOSURE_NO_DEPS;
    goog.global.CLOSURE_IMPORT_SCRIPT;
    goog.nullFunction = function() {
    };
    goog.abstractMethod = function() {
        throw Error('unimplemented abstract method');
    };
    goog.addSingletonGetter = function(ctor) {
        ctor.instance_ = undefined;
        ctor.getInstance = function() {
            if (ctor.instance_)
                return ctor.instance_;
            if (goog.DEBUG)
                goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
            return ctor.instance_ = new ctor
        }
    };
    goog.instantiatedSingletons_ = [];
    goog.define('goog.LOAD_MODULE_USING_EVAL', true);
    goog.define('goog.SEAL_MODULE_EXPORTS', goog.DEBUG);
    goog.loadedModules_ = {};
    goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
    goog.define('goog.TRANSPILE', 'detect');
    goog.define('goog.TRANSPILER', 'transpile.js');
    if (goog.DEPENDENCIES_ENABLED) {
        goog.dependencies_ = {
            loadFlags : {},
            nameToPath : {},
            requires : {},
            visited : {},
            written : {},
            deferred : {}
        };
        goog.inHtmlDocument_ = function() {
            var doc = goog.global.document;
            return doc != null && 'write' in doc
        };
        goog.findBasePath_ = function() {
            if (goog.isDef(goog.global.CLOSURE_BASE_PATH)) {
                goog.basePath = goog.global.CLOSURE_BASE_PATH;
                return
            } else if (!goog.inHtmlDocument_())
                return;
            var doc = goog.global.document;
            var scripts = doc.getElementsByTagName('SCRIPT');
            for (var i = scripts.length - 1; i >= 0; --i) {
                var script = (scripts[i]);
                var src = script.src;
                var qmark = src.lastIndexOf('?');
                var l = qmark == -1 ? src.length : qmark;
                if (src.substr(l - 7, 7) == 'base.js') {
                    goog.basePath = src.substr(0, l - 7);
                    return
                }
            }
        };
        goog.importScript_ = function(src, opt_sourceText) {
            var importScript = goog.global.CLOSURE_IMPORT_SCRIPT
                    || goog.writeScriptTag_;
            if (importScript(src, opt_sourceText))
                goog.dependencies_.written[src] = true
        };
        goog.IS_OLD_IE_ = !!(!goog.global.atob && goog.global.document && goog.global.document.all);
        goog.oldIeWaiting_ = false;
        goog.importProcessedScript_ = function(src, isModule, needsTranspile) {
            var bootstrap = 'goog.retrieveAndExec_("' + src + '", ' + isModule + ', '
                    + needsTranspile + ');';
            goog.importScript_('', bootstrap)
        };
        goog.queuedModules_ = [];
        goog.wrapModule_ = function(srcUrl, scriptText) {
            if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON))
                return '' + 'goog.loadModule(function(exports) {' + '"use strict";'
                        + scriptText + '\n' + ';return exports' + '});'
                        + '\n//# sourceURL=' + srcUrl + '\n';
            else
                return ''
                        + 'goog.loadModule('
                        + goog.global.JSON.stringify(scriptText + '\n//# sourceURL='
                                + srcUrl + '\n') + ');'
        };
        goog.loadQueuedModules_ = function() {
            var count = goog.queuedModules_.length;
            if (count > 0) {
                var queue = goog.queuedModules_;
                goog.queuedModules_ = [];
                for (var i = 0; i < count; i++) {
                    var path = queue[i];
                    goog.maybeProcessDeferredPath_(path)
                }
            }
            goog.oldIeWaiting_ = false
        };
        goog.maybeProcessDeferredDep_ = function(name) {
            if (goog.isDeferredModule_(name) && goog.allDepsAreAvailable_(name)) {
                var path = goog.getPathFromDeps_(name);
                goog.maybeProcessDeferredPath_(goog.basePath + path)
            }
        };
        goog.isDeferredModule_ = function(name) {
            var path = goog.getPathFromDeps_(name);
            var loadFlags = path && goog.dependencies_.loadFlags[path] || {};
            var languageLevel = loadFlags['lang'] || 'es3';
            if (path
                    && (loadFlags['module'] == 'goog' || goog
                            .needsTranspile_(languageLevel))) {
                var abspath = goog.basePath + path;
                return abspath in goog.dependencies_.deferred
            }
            return false
        };
        goog.allDepsAreAvailable_ = function(name) {
            var path = goog.getPathFromDeps_(name);
            if (path && path in goog.dependencies_.requires)
                for ( var requireName in goog.dependencies_.requires[path])
                    if (!goog.isProvided_(requireName)
                            && !goog.isDeferredModule_(requireName))
                        return false;
            return true
        };
        goog.maybeProcessDeferredPath_ = function(abspath) {
            if (abspath in goog.dependencies_.deferred) {
                var src = goog.dependencies_.deferred[abspath];
                delete goog.dependencies_.deferred[abspath];
                goog.globalEval(src)
            }
        };
        goog.loadModuleFromUrl = function(url) {
            goog.retrieveAndExec_(url, true, false)
        };
        goog.writeScriptSrcNode_ = function(src) {
            goog.global.document.write('<script type="text/javascript" src="' + src
                    + '"></' + 'script>')
        };
        goog.appendScriptSrcNode_ = function(src) {
            var doc = goog.global.document;
            var scriptEl = (doc.createElement('script'));
            scriptEl.type = 'text/javascript';
            scriptEl.src = src;
            scriptEl.defer = false;
            scriptEl.async = false;
            doc.head.appendChild(scriptEl)
        };
        goog.writeScriptTag_ = function(src, opt_sourceText) {
            if (goog.inHtmlDocument_()) {
                var doc = goog.global.document;
                if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING
                        && doc.readyState == 'complete') {
                    var isDeps = /\bdeps.js$/.test(src);
                    if (isDeps)
                        return false;
                    else
                        throw Error('Cannot write "' + src + '" after document load');
                }
                if (opt_sourceText === undefined)
                    if (!goog.IS_OLD_IE_)
                        if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING)
                            goog.appendScriptSrcNode_(src);
                        else
                            goog.writeScriptSrcNode_(src);
                    else {
                        goog.oldIeWaiting_ = true;
                        var state = " onreadystatechange='goog.onScriptLoad_(this, "
                                + ++goog.lastNonModuleScriptIndex_ + ")' ";
                        doc.write('<script type="text/javascript" src="' + src + '"'
                                + state + '></' + 'script>')
                    }
                else
                    doc.write('<script type="text/javascript">'
                            + goog.protectScriptTag_(opt_sourceText) + '</' + 'script>');
                return true
            } else
                return false
        };
        goog.protectScriptTag_ = function(str) {
            return str.replace(/<\/(SCRIPT)/ig, '\\x3c/$1')
        };
        goog.needsTranspile_ = function(lang) {
            if (goog.TRANSPILE == 'always')
                return true;
            else if (goog.TRANSPILE == 'never')
                return false;
            else if (!goog.requiresTranspilation_)
                goog.requiresTranspilation_ = goog.createRequiresTranspilation_();
            if (lang in goog.requiresTranspilation_)
                return goog.requiresTranspilation_[lang];
            else
                throw new Error('Unknown language mode: ' + lang);
        };
        goog.requiresTranspilation_ = null;
        goog.lastNonModuleScriptIndex_ = 0;
        goog.onScriptLoad_ = function(script, scriptIndex) {
            if (script.readyState == 'complete'
                    && goog.lastNonModuleScriptIndex_ == scriptIndex)
                goog.loadQueuedModules_();
            return true
        };
        goog.writeScripts_ = function(pathToLoad) {
            var scripts = [];
            var seenScript = {};
            var deps = goog.dependencies_;
            function visitNode(path) {
                if (path in deps.written)
                    return;
                if (path in deps.visited)
                    return;
                deps.visited[path] = true;
                if (path in deps.requires)
                    for ( var requireName in deps.requires[path])
                        if (!goog.isProvided_(requireName))
                            if (requireName in deps.nameToPath)
                                visitNode(deps.nameToPath[requireName]);
                            else
                                throw Error('Undefined nameToPath for ' + requireName);
                if (!(path in seenScript)) {
                    seenScript[path] = true;
                    scripts.push(path)
                }
            }
            visitNode(pathToLoad);
            for (var i = 0; i < scripts.length; i++) {
                var path = scripts[i];
                goog.dependencies_.written[path] = true
            }
            var moduleState = goog.moduleLoaderState_;
            goog.moduleLoaderState_ = null;
            for (var i = 0; i < scripts.length; i++) {
                var path = scripts[i];
                if (path) {
                    var loadFlags = deps.loadFlags[path] || {};
                    var languageLevel = loadFlags['lang'] || 'es3';
                    var needsTranspile = goog.needsTranspile_(languageLevel);
                    if (loadFlags['module'] == 'goog' || needsTranspile)
                        goog.importProcessedScript_(goog.basePath + path,
                                loadFlags['module'] == 'goog', needsTranspile);
                    else
                        goog.importScript_(goog.basePath + path)
                } else {
                    goog.moduleLoaderState_ = moduleState;
                    throw Error('Undefined script input');
                }
            }
            goog.moduleLoaderState_ = moduleState
        };
        goog.getPathFromDeps_ = function(rule) {
            if (rule in goog.dependencies_.nameToPath)
                return goog.dependencies_.nameToPath[rule];
            else
                return null
        };
        goog.findBasePath_();
        if (!goog.global.CLOSURE_NO_DEPS)
            goog.importScript_(goog.basePath + 'deps.js')
    }
    goog.hasBadLetScoping = null;
    goog.useSafari10Workaround = function() {
        if (goog.hasBadLetScoping == null) {
            var hasBadLetScoping;
            try {
                hasBadLetScoping = !eval('"use strict";'
                        + 'let x = 1; function f() { return typeof x; };'
                        + 'f() == "number";')
            } catch (e) {
                hasBadLetScoping = false
            }
            goog.hasBadLetScoping = hasBadLetScoping
        }
        return goog.hasBadLetScoping
    };
    goog.workaroundSafari10EvalBug = function(moduleDef) {
        return '(function(){' + moduleDef + '\n' + ';' + '})();\n'
    };
    goog.loadModule = function(moduleDef) {
        var previousState = goog.moduleLoaderState_;
        try {
            goog.moduleLoaderState_ = {
                moduleName : undefined,
                declareLegacyNamespace : false
            };
            var exports;
            if (goog.isFunction(moduleDef))
                exports = moduleDef.call(undefined, {});
            else if (goog.isString(moduleDef)) {
                if (goog.useSafari10Workaround())
                    moduleDef = goog.workaroundSafari10EvalBug(moduleDef);
                exports = goog.loadModuleFromSource_.call(undefined, moduleDef)
            } else
                throw Error('Invalid module definition');
            var moduleName = goog.moduleLoaderState_.moduleName;
            if (!goog.isString(moduleName) || !moduleName)
                throw Error('Invalid module name "' + moduleName + '"');
            if (goog.moduleLoaderState_.declareLegacyNamespace)
                goog.constructNamespace_(moduleName, exports);
            else if (goog.SEAL_MODULE_EXPORTS && Object.seal
                    && typeof exports == 'object' && exports != null)
                Object.seal(exports);
            goog.loadedModules_[moduleName] = exports
        } finally {
            goog.moduleLoaderState_ = previousState
        }
    };
    goog.loadModuleFromSource_ = (function() {
        var exports = {};
        eval(arguments[0]);
        return exports
    });
    goog.normalizePath_ = function(path) {
        var components = path.split('/');
        var i = 0;
        while (i < components.length)
            if (components[i] == '.')
                components.splice(i, 1);
            else if (i && components[i] == '..' && components[i - 1]
                    && components[i - 1] != '..')
                components.splice(--i, 2);
            else
                i++;
        return components.join('/')
    };
    goog.global.CLOSURE_LOAD_FILE_SYNC;
    goog.loadFileSync_ = function(src) {
        if (goog.global.CLOSURE_LOAD_FILE_SYNC)
            return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
        else
            try {
                var xhr = new goog.global['XMLHttpRequest'];
                xhr.open('get', src, false);
                xhr.send();
                return xhr.status == 0 || xhr.status == 200 ? xhr.responseText : null
            } catch (err) {
                return null
            }
    };
    goog.retrieveAndExec_ = function(src, isModule, needsTranspile) {
        if (!COMPILED) {
            var originalPath = src;
            src = goog.normalizePath_(src);
            var importScript = goog.global.CLOSURE_IMPORT_SCRIPT
                    || goog.writeScriptTag_;
            var scriptText = goog.loadFileSync_(src);
            if (scriptText == null)
                throw new Error('Load of "' + src + '" failed');
            if (needsTranspile)
                scriptText = goog.transpile_.call(goog.global, scriptText, src);
            if (isModule)
                scriptText = goog.wrapModule_(src, scriptText);
            else
                scriptText += '\n//# sourceURL=' + src;
            var isOldIE = goog.IS_OLD_IE_;
            if (isOldIE && goog.oldIeWaiting_) {
                goog.dependencies_.deferred[originalPath] = scriptText;
                goog.queuedModules_.push(originalPath)
            } else
                importScript(src, scriptText)
        }
    };
    goog.transpile_ = function(code, path) {
        var jscomp = goog.global['$jscomp'];
        if (!jscomp)
            goog.global['$jscomp'] = jscomp = {};
        var transpile = jscomp.transpile;
        if (!transpile) {
            var transpilerPath = goog.basePath + goog.TRANSPILER;
            var transpilerCode = goog.loadFileSync_(transpilerPath);
            if (transpilerCode) {
                eval(transpilerCode + '\n//# sourceURL=' + transpilerPath);
                if (goog.global['$gwtExport'] && goog.global['$gwtExport']['$jscomp']
                        && !goog.global['$gwtExport']['$jscomp']['transpile'])
                    throw new Error(
                            'The transpiler did not properly export the "transpile" '
                                    + 'method. $gwtExport: '
                                    + JSON.stringify(goog.global['$gwtExport']));
                goog.global['$jscomp'].transpile = goog.global['$gwtExport']['$jscomp']['transpile'];
                jscomp = goog.global['$jscomp'];
                transpile = jscomp.transpile
            }
        }
        if (!transpile) {
            var suffix = ' requires transpilation but no transpiler was found.';
            transpile = jscomp.transpile = function(code, path) {
                goog.logToConsole_(path + suffix);
                return code
            }
        }
        return transpile(code, path)
    };
    goog.typeOf = function(value) {
        var s = typeof value;
        if (s == 'object')
            if (value) {
                if (value instanceof Array)
                    return 'array';
                else if (value instanceof Object)
                    return s;
                var className = Object.prototype.toString.call((value));
                if (className == '[object Window]')
                    return 'object';
                if (className == '[object Array]' || typeof value.length == 'number'
                        && typeof value.splice != 'undefined'
                        && typeof value.propertyIsEnumerable != 'undefined'
                        && !value.propertyIsEnumerable('splice'))
                    return 'array';
                if (className == '[object Function]'
                        || typeof value.call != 'undefined'
                        && typeof value.propertyIsEnumerable != 'undefined'
                        && !value.propertyIsEnumerable('call'))
                    return 'function'
            } else
                return 'null';
        else if (s == 'function' && typeof value.call == 'undefined')
            return 'object';
        return s
    };
    goog.isNull = function(val) {
        return val === null
    };
    goog.isDefAndNotNull = function(val) {
        return val != null
    };
    goog.isArray = function(val) {
        return goog.typeOf(val) == 'array'
    };
    goog.isArrayLike = function(val) {
        var type = goog.typeOf(val);
        return type == 'array' || type == 'object' && typeof val.length == 'number'
    };
    goog.isDateLike = function(val) {
        return goog.isObject(val) && typeof val.getFullYear == 'function'
    };
    goog.isString = function(val) {
        return typeof val == 'string'
    };
    goog.isBoolean = function(val) {
        return typeof val == 'boolean'
    };
    goog.isNumber = function(val) {
        return typeof val == 'number'
    };
    goog.isFunction = function(val) {
        return goog.typeOf(val) == 'function'
    };
    goog.isObject = function(val) {
        var type = typeof val;
        return type == 'object' && val != null || type == 'function'
    };
    goog.getUid = function(obj) {
        return obj[goog.UID_PROPERTY_]
                || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_)
    };
    goog.hasUid = function(obj) {
        return !!obj[goog.UID_PROPERTY_]
    };
    goog.removeUid = function(obj) {
        if (obj !== null && 'removeAttribute' in obj)
            obj.removeAttribute(goog.UID_PROPERTY_);
        try {
            delete obj[goog.UID_PROPERTY_]
        } catch (ex) {
        }
    };
    goog.UID_PROPERTY_ = 'closure_uid_' + (Math.random() * 1E9 >>> 0);
    goog.uidCounter_ = 0;
    goog.getHashCode = goog.getUid;
    goog.removeHashCode = goog.removeUid;
    goog.cloneObject = function(obj) {
        var type = goog.typeOf(obj);
        if (type == 'object' || type == 'array') {
            if (obj.clone)
                return obj.clone();
            var clone = type == 'array' ? [] : {};
            for ( var key in obj)
                clone[key] = goog.cloneObject(obj[key]);
            return clone
        }
        return obj
    };
    goog.bindNative_ = function(fn, selfObj, var_args) {
        return (fn.call.apply(fn.bind, arguments))
    };
    goog.bindJs_ = function(fn, selfObj, var_args) {
        if (!fn)
            throw new Error;
        if (arguments.length > 2) {
            var boundArgs = Array.prototype.slice.call(arguments, 2);
            return function() {
                var newArgs = Array.prototype.slice.call(arguments);
                Array.prototype.unshift.apply(newArgs, boundArgs);
                return fn.apply(selfObj, newArgs)
            }
        } else
            return function() {
                return fn.apply(selfObj, arguments)
            }
    };
    goog.bind = function(fn, selfObj, var_args) {
        if (Function.prototype.bind
                && Function.prototype.bind.toString().indexOf('native code') != -1)
            goog.bind = goog.bindNative_;
        else
            goog.bind = goog.bindJs_;
        return goog.bind.apply(null, arguments)
    };
    goog.partial = function(fn, var_args) {
        var args = Array.prototype.slice.call(arguments, 1);
        return function() {
            var newArgs = args.slice();
            newArgs.push.apply(newArgs, arguments);
            return fn.apply(this, newArgs)
        }
    };
    goog.mixin = function(target, source) {
        for ( var x in source)
            target[x] = source[x]
    };
    goog.now = goog.TRUSTED_SITE && Date.now || function() {
        return +new Date
    };
    goog.globalEval = function(script) {
        if (goog.global.execScript)
            goog.global.execScript(script, 'JavaScript');
        else if (goog.global.eval) {
            if (goog.evalWorksForGlobals_ == null) {
                goog.global.eval('var _evalTest_ = 1;');
                if (typeof goog.global['_evalTest_'] != 'undefined') {
                    try {
                        delete goog.global['_evalTest_']
                    } catch (ignore) {
                    }
                    goog.evalWorksForGlobals_ = true
                } else
                    goog.evalWorksForGlobals_ = false
            }
            if (goog.evalWorksForGlobals_)
                goog.global.eval(script);
            else {
                var doc = goog.global.document;
                var scriptElt = (doc.createElement('SCRIPT'));
                scriptElt.type = 'text/javascript';
                scriptElt.defer = false;
                scriptElt.appendChild(doc.createTextNode(script));
                doc.body.appendChild(scriptElt);
                doc.body.removeChild(scriptElt)
            }
        } else
            throw Error('goog.globalEval not available');
    };
    goog.evalWorksForGlobals_ = null;
    goog.cssNameMapping_;
    goog.cssNameMappingStyle_;
    goog.global.CLOSURE_CSS_NAME_MAP_FN;
    goog.getCssName = function(className, opt_modifier) {
        if (String(className).charAt(0) == '.')
            throw new Error(
                    'className passed in goog.getCssName must not start with ".".'
                            + ' You passed: ' + className);
        var getMapping = function(cssName) {
            return goog.cssNameMapping_[cssName] || cssName
        };
        var renameByParts = function(cssName) {
            var parts = cssName.split('-');
            var mapped = [];
            for (var i = 0; i < parts.length; i++)
                mapped.push(getMapping(parts[i]));
            return mapped.join('-')
        };
        var rename;
        if (goog.cssNameMapping_)
            rename = goog.cssNameMappingStyle_ == 'BY_WHOLE' ? getMapping
                    : renameByParts;
        else
            rename = function(a) {
                return a
            };
        var result = opt_modifier ? className + '-' + rename(opt_modifier)
                : rename(className);
        if (goog.global.CLOSURE_CSS_NAME_MAP_FN)
            return goog.global.CLOSURE_CSS_NAME_MAP_FN(result);
        return result
    };
    goog.setCssNameMapping = function(mapping, opt_style) {
        goog.cssNameMapping_ = mapping;
        goog.cssNameMappingStyle_ = opt_style
    };
    goog.global.CLOSURE_CSS_NAME_MAPPING;
    if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING)
        goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
    goog.getMsg = function(str, opt_values) {
        if (opt_values)
            str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
                return opt_values != null && key in opt_values ? opt_values[key]
                        : match
            });
        return str
    };
    goog.getMsgWithFallback = function(a, b) {
        return a
    };
    goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
        goog.exportPath_(publicPath, object, opt_objectToExportTo)
    };
    goog.exportProperty = function(object, publicName, symbol) {
        object[publicName] = symbol
    };
    goog.inherits = function(childCtor, parentCtor) {
        function tempCtor() {
        }
        tempCtor.prototype = parentCtor.prototype;
        childCtor.superClass_ = parentCtor.prototype;
        childCtor.prototype = new tempCtor;
        childCtor.prototype.constructor = childCtor;
        childCtor.base = function(me, methodName, var_args) {
            var args = new Array(arguments.length - 2);
            for (var i = 2; i < arguments.length; i++)
                args[i - 2] = arguments[i];
            return parentCtor.prototype[methodName].apply(me, args)
        }
    };
    goog.base = function(me, opt_methodName, var_args) {
        var caller = arguments.callee.caller;
        if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller)
            throw Error('arguments.caller not defined.  goog.base() cannot be used '
                    + 'with strict mode code. See '
                    + 'http://www.ecma-international.org/ecma-262/5.1/#sec-C');
        if (caller.superClass_) {
            var ctorArgs = new Array(arguments.length - 1);
            for (var i = 1; i < arguments.length; i++)
                ctorArgs[i - 1] = arguments[i];
            return caller.superClass_.constructor.apply(me, ctorArgs)
        }
        var args = new Array(arguments.length - 2);
        for (var i = 2; i < arguments.length; i++)
            args[i - 2] = arguments[i];
        var foundCaller = false;
        for (var ctor = me.constructor; ctor; ctor = ctor.superClass_
                && ctor.superClass_.constructor)
            if (ctor.prototype[opt_methodName] === caller)
                foundCaller = true;
            else if (foundCaller)
                return ctor.prototype[opt_methodName].apply(me, args);
        if (me[opt_methodName] === caller)
            return me.constructor.prototype[opt_methodName].apply(me, args);
        else
            throw Error('goog.base called from a method of one name '
                    + 'to a method of a different name');
    };
    goog.scope = function(fn) {
        if (goog.isInModuleLoader_())
            throw Error('goog.scope is not supported within a goog.module.');
        fn.call(goog.global)
    };
    if (!COMPILED)
        goog.global['COMPILED'] = COMPILED;
    goog.defineClass = function(superClass, def) {
        var constructor = def.constructor;
        var statics = def.statics;
        if (!constructor || constructor == Object.prototype.constructor)
            constructor = function() {
                throw Error('cannot instantiate an interface (no constructor defined).');
            };
        var cls = goog.defineClass.createSealingConstructor_(constructor,
                superClass);
        if (superClass)
            goog.inherits(cls, superClass);
        delete def.constructor;
        delete def.statics;
        goog.defineClass.applyProperties_(cls.prototype, def);
        if (statics != null)
            if (statics instanceof Function)
                statics(cls);
            else
                goog.defineClass.applyProperties_(cls, statics);
        return cls
    };
    goog.defineClass.ClassDescriptor;
    goog.define('goog.defineClass.SEAL_CLASS_INSTANCES', goog.DEBUG);
    goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
        if (!goog.defineClass.SEAL_CLASS_INSTANCES)
            return ctr;
        var superclassSealable = !goog.defineClass.isUnsealable_(superClass);
        var wrappedCtr = function() {
            var instance = ctr.apply(this, arguments) || this;
            instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];
            if (this.constructor === wrappedCtr && superclassSealable
                    && Object.seal instanceof Function)
                Object.seal(instance);
            return instance
        };
        return wrappedCtr
    };
    goog.defineClass.isUnsealable_ = function(ctr) {
        return ctr && ctr.prototype
                && ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]
    };
    goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = [ 'constructor',
            'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
            'toLocaleString', 'toString', 'valueOf' ];
    goog.defineClass.applyProperties_ = function(target, source) {
        var key;
        for (key in source)
            if (Object.prototype.hasOwnProperty.call(source, key))
                target[key] = source[key];
        for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {
            key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
            if (Object.prototype.hasOwnProperty.call(source, key))
                target[key] = source[key]
        }
    };
    goog.tagUnsealableClass = function(ctr) {
        if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES)
            ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true
    };
    goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = 'goog_defineClass_legacy_unsealable';
    goog.createRequiresTranspilation_ = function() {
        var requiresTranspilation = {
            'es3' : false
        };
        var transpilationRequiredForAllLaterModes = false;
        function addNewerLanguageTranspilationCheck(modeName, isSupported) {
            if (transpilationRequiredForAllLaterModes)
                requiresTranspilation[modeName] = true;
            else if (isSupported())
                requiresTranspilation[modeName] = false;
            else {
                requiresTranspilation[modeName] = true;
                transpilationRequiredForAllLaterModes = true
            }
        }
        function evalCheck(code) {
            try {
                return !!eval(code)
            } catch (ignored) {
                return false
            }
        }
        var userAgent = goog.global.navigator && goog.global.navigator.userAgent ? goog.global.navigator.userAgent
                : '';
        addNewerLanguageTranspilationCheck('es5', function() {
            return evalCheck('[1,].length==1')
        });
        addNewerLanguageTranspilationCheck(
                'es6',
                function() {
                    var re = /Edge\/(\d+)(\.\d)*/i;
                    var edgeUserAgent = userAgent.match(re);
                    if (edgeUserAgent && Number(edgeUserAgent[1]) < 15)
                        return false;
                    var es6fullTest = 'class X{constructor(){if(new.target!=String)throw 1;this.x=42}}'
                            + 'let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof '
                            + 'String))throw 1;for(const a of[2,3]){if(a==2)continue;function '
                            + 'f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()'
                            + '==3}';
                    return evalCheck('(()=>{"use strict";' + es6fullTest + '})()')
                });
        addNewerLanguageTranspilationCheck('es6-impl', function() {
            return true
        });
        addNewerLanguageTranspilationCheck('es7', function() {
            return evalCheck('2 ** 2 == 4')
        });
        addNewerLanguageTranspilationCheck('es8', function() {
            return evalCheck('async () => 1, true')
        });
        return requiresTranspilation
    };
    goog.provide('leodido.constants');
    leodido.constants.DEBUG = false;
    leodido.constants.CARETAWARE_DIRECTIVE_NAME = 'caretAware';
    leodido.constants.CARETAWARE_DEFAULT_NS = 'caret';
    goog.provide('leodido.typedef.Selection');
    leodido.typedef.Selection;
    goog.provide('leodido.controller.Caret');
    goog.require('leodido.constants');
    goog.require('leodido.typedef.Selection');
    leodido.controller.Caret = function($scope, $element, $attrs) {
        leodido.constants.DEBUG && console.log('CaretController::ctor');
        var target = $element[0];
        var namespace;
        var startVal = 0;
        var setNamespace = function(ns) {
            namespace = ns || leodido.constants.CARETAWARE_DEFAULT_NS;
            $scope[namespace] = null;
            return self
        };
        var support = {
            selectionRange : 'setSelectionRange' in target
                    || 'selectionStart' in target,
            textRange : 'createTextRange' in target || 'selection' in document
        };
        var getValue = function() {
            return target.value || ''
        };
        var getIndex = function(pos) {
            var value = getValue().replace(/\r/g, ''), len = value.length, position = ~~pos;
            if (position < startVal)
                position = len + pos;
            else if (position > len)
                position = len;
            return position
        };
        var self = this;
        var getPositionPolyfill;
        var getSelectionPolyfill;
        var setPositionPolyfill;
        var setSelectionTextPolyfill;
        switch (true) {
        case support.selectionRange:
            getSelectionPolyfill = function() {
                var start = target.selectionStart;
                var end = target.selectionEnd;
                var len = end - start;
                return {
                    start : start,
                    end : end,
                    length : len,
                    text : target.value.substr(start, len)
                }
            };
            setPositionPolyfill = function(pos) {
                pos = getIndex(pos);
                target.focus();
                target.setSelectionRange(pos, pos);
                target.selectionStart = pos;
                target.selectionEnd = pos;
                $scope[self.getNamespace()] = pos
            };
            setSelectionTextPolyfill = function(text) {
                var start, end, pos, scrollTop, scrollLeft, range;
                start = target.selectionStart;
                end = target.selectionEnd;
                scrollTop = target.scrollTop;
                scrollLeft = target.scrollLeft;
                target.value = target.value.substr(0, start) + text
                        + target.value.substr(end);
                pos = start + text.length;
                target.selectionStart = pos;
                target.selectionEnd = pos;
                target.scrollTop = scrollTop;
                target.scrollLeft = scrollLeft
            };
            break;
        case support.textRange:
            getSelectionPolyfill = function() {
                target.focus();
                var rng = document.selection.createRange();
                if (rng === null)
                    return {
                        start : 0,
                        end : target.value.length,
                        length : 0
                    };
                var trng1 = target.createTextRange();
                var trng2 = trng1.duplicate();
                trng1.moveToBookmark(rng.getBookmark());
                trng2.setEndPoint('EndToStart', trng1);
                var start = trng2.text.length;
                var text = rng.text;
                var len = text.length;
                return {
                    start : start,
                    end : start + len,
                    length : len,
                    text : text
                }
            };
            setPositionPolyfill = function(pos) {
                pos = getIndex(pos);
                var range = target.createTextRange();
                range.move('character', pos);
                range.select();
                $scope[self.getNamespace()] = pos
            };
            setSelectionTextPolyfill = function(text) {
                var range = target.ownerDocument.selection.createRange();
                range.text = text;
                range.move('character', 0);
                range.select()
            };
            break;
        default:
            getSelectionPolyfill = function() {
                return {
                    start : startVal,
                    end : startVal,
                    length : startVal,
                    text : ''
                }
            };
            setPositionPolyfill = function() {
            };
            setSelectionTextPolyfill = function(text) {
                target.value += text;
                target.scrollTop = 1E5
            }
        }
        getPositionPolyfill = function() {
            return getSelectionPolyfill().start
        };
        setNamespace($attrs[leodido.constants.CARETAWARE_DIRECTIVE_NAME]);
        self.getNamespace = function() {
            return namespace
        };
        self.setPosition = function(pos) {
            if (!isNaN(parseFloat(pos)) && isFinite(pos)) {
                setPositionPolyfill(pos);
                return self
            }
            throw new TypeError('Position MUST be numeric.');
        };
        self.getPosition = getPositionPolyfill;
        self.getSelection = getSelectionPolyfill;
        self.setSelectionText = function(text) {
            setSelectionTextPolyfill(text);
            return self
        };
        goog.exportProperty(self, 'getNamespace', self.getNamespace);
        goog.exportProperty(self, 'setPosition', self.setPosition);
        goog.exportProperty(self, 'getPosition', self.getPosition);
        goog.exportProperty(self, 'setSelectionText', self.setSelectionText)
    };
    goog.provide('leodido.directive.CaretAwareFactory');
    goog.require('leodido.constants');
    goog.require('leodido.controller.Caret');
    leodido.directive.CaretAware = function() {
        leodido.constants.DEBUG && console.log('CaretAware::ctor')
    };
    leodido.directive.CaretAware.prototype.link = function($scope, $elem, $attrs,
            $ctrl) {
        leodido.constants.DEBUG && console.log('CaretAware::link');
        $elem.on('keydown keyup click', function() {
            $scope.$evalAsync(function() {
                $scope[$ctrl.getNamespace()] = $ctrl.getPosition()
            })
        });
        $scope.$watch($ctrl.getNamespace(), function(val) {
            if ($ctrl.getPosition() !== val && null !== val)
                $ctrl.setPosition(val)
        });
        $scope.$on('$destroy', function() {
            delete $scope[$ctrl.getNamespace()];
            $elem.off('keydown keyup click')
        })
    };
    leodido.directive.CaretAwareFactory = function() {
        var directive = new leodido.directive.CaretAware;
        return {
            restrict : 'AC',
            require : leodido.constants.CARETAWARE_DIRECTIVE_NAME,
            controller : leodido.controller.Caret,
            link : directive.link
        }
    };
    goog.require('leodido.directive.CaretAwareFactory');
    angular.module('leodido.' + leodido.constants.CARETAWARE_DIRECTIVE_NAME, [])
            .directive(leodido.constants.CARETAWARE_DIRECTIVE_NAME,
                    leodido.directive.CaretAwareFactory);
})();
