/*! angular-sorted-map v2.0.0 | Â© 2016 Alexander Ustimenko <a@ustimen.co> | MIT */
!function(namespace,objectCreate){function Temp(){}function extend(O){Temp.prototype=O;var obj=new Temp;return Temp.prototype=null,obj}namespace.extend=objectCreate||extend}(window.garex=window.garex||{},Object.create),function(namespace){function MapEntry(key,value){this.key=key,this.value=value,this.setValue=function(newValue){return this.value=newValue,this}}namespace.MapEntry=MapEntry}(window.garex=window.garex||{}),function(namespace){function hashCode(value){return isObject(value)?stringifyObject(value):value.toString()}function isObject(value){return null===value?!1:"object"==typeof value}function stringifyString(value){return value.toString()}function stringifyObject(value){if("function"==typeof value.hashCode)return value.hashCode();if(hasJSON)return JSON.stringify(value);var result="";for(var property in value)hasOwnProperty.call(value,property)&&(result+="{"+property+":"+stringify(value[property])+"}");return result}function stringify(value){if(null===value)return"null";var type=typeof value;return stringifyTypes[type]?stringifyTypes[type](value):"undefined"}var hasOwnProperty=Object.prototype.hasOwnProperty,hasJSON="undefined"!=typeof JSON,stringifyTypes={string:stringifyString,number:stringifyString,"boolean":stringifyString,object:stringifyObject};namespace.hashCode=hashCode}(window.garex=window.garex||{}),function(namespace,MapEntry,hashCode){function Map(){this.clear()}function clear(items){return items.length=0,items=[]}function splice(items,i){items.splice(i,1)}function indexOfObject(object,property){return void 0==object[property]?-1:object[property]}function indexOf(items,item){if("undefined"!=typeof items.indexOf)return items.indexOf(item);for(var i=0,iMax=items.length;iMax>i;i++)if(item===items[i])return i;return-1}Map.prototype.keys=[],Map.prototype.hashedKeys={},Map.prototype.values=[],Map.prototype.entries=[],Map.prototype.size=function(){return this.keys.length},Map.prototype.isEmpty=function(){return 0==this.size()},Map.prototype.containsKey=function(key){return indexOfObject(this.hashedKeys,hashCode(key))>-1},Map.prototype.containsValue=function(value){return indexOf(this.values,value)>-1},Map.prototype.get=function(key){var i=indexOfObject(this.hashedKeys,hashCode(key));return-1==i?void 0:this.values[i]},Map.prototype.put=function(key,value){var entry=2==arguments.length?new MapEntry(key,value):key,keyString=hashCode(entry.key),i=indexOfObject(this.hashedKeys,keyString);return-1==i?this.putNew(keyString,entry):(this.values[i]=entry.value,this.entries[i].setValue(entry.value)),this},Map.prototype.putNew=function(keyString,entry){this.hashedKeys[keyString]=this.keys.length,this.keys.push(entry.key),this.values.push(entry.value),this.entries.push(entry)},Map.prototype.remove=function(key){var keyString=hashCode(key),i=indexOfObject(this.hashedKeys,keyString);if(-1!=i){var removed=this.values[i];splice(this.keys,i),splice(this.values,i),splice(this.entries,i);for(var iMax=this.keys.length;iMax>i;i++)this.hashedKeys[hashCode(this.keys[i])]=i;return this.hashedKeys[keyString]=-1,removed}},Map.prototype.clear=function(){return this.keys=clear(this.keys),this.hashedKeys={},this.values=clear(this.values),this.entries=clear(this.entries),this},namespace.Map=Map}(window.garex,window.garex.MapEntry,window.garex.hashCode),function(namespace,Map,extend,hashCode){function SortedMap(){Map.apply(this,arguments)}function binarySearch(items,item){for(var middle,low=0,high=items.length-1;high>=low;)if(middle=low+high>>1,current=hashCode(items[middle]),current<item)low=middle+1;else{if(!(current>item))return middle;high=middle-1}return-(low+1)}function insert(items,i,item){items.splice(i,0,item)}SortedMap.prototype=extend(Map.prototype),SortedMap.prototype.putNew=function(keyString,entry){var startingIndex=-binarySearch(this.keys,keyString)-1,keysLength=this.keys.length;if(startingIndex==keysLength)return Map.prototype.putNew.apply(this,arguments);this.hashedKeys[keyString]=startingIndex;for(var i=startingIndex,iMax=keysLength;iMax>i;i++)this.hashedKeys[hashCode(this.keys[i])]=i+1;insert(this.keys,startingIndex,entry.key),insert(this.values,startingIndex,entry.value),insert(this.entries,startingIndex,entry)},namespace.SortedMap=SortedMap}(window.garex,window.garex.Map,window.garex.extend,window.garex.hashCode);
//# sourceMappingURL=angular-sorted-map.min.js.map